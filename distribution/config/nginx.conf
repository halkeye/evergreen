user nginx;

# Set number of worker processes automatically based on number of CPU cores.
worker_processes auto;

# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;

# Configures default error logger.
error_log /var/log/nginx/error.log warn;

# Includes files with directives to load dynamic modules.
include /etc/nginx/modules/*.conf;

events {
    # The maximum number of simultaneous connections that can be opened by
    # a worker process.
    worker_connections 1024;
}

http {
    # Includes mapping of file name extensions to MIME types of responses
    # and defines the default type.
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Don't tell nginx version to clients.
    server_tokens off;

    # Specifies the maximum accepted body size of a client request, as
    # indicated by the request header Content-Length. If the stated content
    # length is greater than this size, then the client receives the HTTP
    # error code 413. Set to 0 to disable.
    client_max_body_size 1m;

    # Timeout for keep-alive connections. Server will close connections after
    # this time.
    keepalive_timeout 65;

    # Sendfile copies data between one FD and other from within the kernel,
    # which is more efficient than read() + write().
    sendfile on;

    # Don't buffer data-sends (disable Nagle algorithm).
    # Good for sending frequent small bursts of data in real time.
    tcp_nodelay on;

    # Specifies that our cipher suits should be preferred over client ciphers.
    ssl_prefer_server_ciphers on;

    # Enables a shared SSL cache with size that can hold around 8000 sessions.
    ssl_session_cache shared:SSL:2m;

    # Enable gzipping of responses.
    gzip on;

    # Set the Vary HTTP header as defined in the RFC 2616.
    gzip_vary on;

    # Enable checking the existence of precompressed files.
    #gzip_static on;

    # Specifies the main log format.
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
            '$status $body_bytes_sent "$http_referer" '
            '"$http_user_agent" "$http_x_forwarded_for"';

    # Sets the path, format, and configuration for a buffered log write.
    access_log /var/log/nginx/access.log main;

    upstream jenkins {
        server localhost:8080;
    }

    upstream evergreen {
        server localhost:8081;
    }

    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        root /evergreen/www;

        error_log /dev/stdout info;
        error_page 502 /502.html;
        error_page 503 /503.html;
        error_page 521 /521.html;

        location ^~ /socket.io {
            proxy_pass http://evergreen;
        }

        # Ensure that all the static assets are served directly from nginx
        # rather than through the feathers app in the client
        location ^~ /evergreen/static {
            autoindex on;
            root /evergreen/www/static;
            rewrite /evergreen/static/(.*) /$1  break;
        }

        # Default all requests to the home page to Blue Ocean, ahoy!
        location = / {
            rewrite ^ $scheme://$http_host/blue/pipelines redirect;
        }

        # Only allow the usage of the Blue Ocean Pipeline creation flow.
        # https://github.com/CodeValet/codevalet/issues/10
        location = /newJob {
            rewrite ^ $scheme://$http_host/blue/organizations/jenkins/create-pipeline redirect;
        }

        # Disable plugin management for users who are not determined to
        # destabilize their environment :)
        location ^~ /pluginManager {
            rewrite ^ $scheme://$http_host/evergreen/docs/#managing-plugins redirect;
        }

        # Disable built-in tool management which is kind of a mess for any new
        # user. Users should instead rely on Docker containers
        location ^~ /configureTools {
            rewrite ^ $scheme://$http_host/evergreen/docs/#managing-toolsredirect;
        }

        location / {
            if ( -f /evergreen/data/booting.txt ) {
                # Used by Cloudflare as "Web Server is down"
                #
                # We're using in this case to convey to the end user that the
                # Jenkins environment is booting
                return 521;
            }
            proxy_redirect off;
            proxy_set_header Host $host:$server_port;
            proxy_set_header X-Forwarded-Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            proxy_pass http://jenkins;
        }

        # Compatibility shim to allow Jenkins to have an /evergreen as well as
        # the root nginx. This should only really be useful for testing, or
        # in case nginx is acting really bezerk.
        location /jenkins {
            proxy_set_header Host $host:$server_port;
            rewrite /jenkins      /    break;
            rewrite /jenkins/(.*) /$1  break;
            proxy_pass http://jenkins;
        }

        location /evergreen {
            rewrite /evergreen      /    break;
            rewrite /evergreen/(.*) /$1  break;
            proxy_pass http://evergreen;
        }

        # Preventing route recursion
        location = /404.html {
            internal;
        }
        # Bad Gateway
        location = /502.html {
            internal;
        }
        # Service Unavailable
        location = /503.html {
            internal;
        }
        # Web Server is Down
        location = /521.html {
            internal;
        }
    }
}

# vim: ft=conf et
